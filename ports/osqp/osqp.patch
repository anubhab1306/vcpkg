diff --git a/CMakeLists.txt b/CMakeLists.txt
index 64671fc6..56085556 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -165,95 +165,95 @@ add_subdirectory (src)
 add_subdirectory (include)
 
 
-# if we are building the Python interface, let's look for Python
-# and set some options
-# -----------------------------------------------------------------
-if (PYTHON)
+## if we are building the Python interface, let's look for Python
+## and set some options
+## -----------------------------------------------------------------
+#if (PYTHON)
 
-    # Python include directories need to be passed by the python compilation process
-    if (NOT PYTHON_INCLUDE_DIRS)
-            message( FATAL_ERROR "You need Python include directories to build the Python interface" )
-    endif (NOT PYTHON_INCLUDE_DIRS)
+    ## Python include directories need to be passed by the python compilation process
+    #if (NOT PYTHON_INCLUDE_DIRS)
+            #message( FATAL_ERROR "You need Python include directories to build the Python interface" )
+    #endif (NOT PYTHON_INCLUDE_DIRS)
 
-    # Include directories for Python headers
-    include_directories(${PYTHON_INCLUDE_DIRS})
+    ## Include directories for Python headers
+    #include_directories(${PYTHON_INCLUDE_DIRS})
 
-    # Pass PYTHON flag to C compiler
-    add_definitions(-DPYTHON)
+    ## Pass PYTHON flag to C compiler
+    #add_definitions(-DPYTHON)
 
-    if (UNITTESTS)
-        # Disable unittests
-        message(STATUS "Disabling UNITTESTS because we are building Python interface")
-        set(UNITTESTS OFF)
-    endif (UNITTESTS)
+    #if (UNITTESTS)
+        ## Disable unittests
+        #message(STATUS "Disabling UNITTESTS because we are building Python interface")
+        #set(UNITTESTS OFF)
+    #endif (UNITTESTS)
 
-endif (PYTHON)
+#endif (PYTHON)
 
 
-# if we are building the Matlab interface, let's look for Matlab
-# and set some options
-# -----------------------------------------------------------------
-if (MATLAB)
+## if we are building the Matlab interface, let's look for Matlab
+## and set some options
+## -----------------------------------------------------------------
+#if (MATLAB)
 
-    find_package(Matlab)
+    #find_package(Matlab)
 
-    if (NOT Matlab_FOUND)
-        message( FATAL_ERROR "You need Matlab libraries to build the Matlab interface" )
-    endif (NOT Matlab_FOUND)
+    #if (NOT Matlab_FOUND)
+        #message( FATAL_ERROR "You need Matlab libraries to build the Matlab interface" )
+    #endif (NOT Matlab_FOUND)
 
-    # Include directories for Matlab headers
-    include_directories(${Matlab_INCLUDE_DIRS})
+    ## Include directories for Matlab headers
+    #include_directories(${Matlab_INCLUDE_DIRS})
 
-    message(STATUS "Matlab root is " ${Matlab_ROOT_DIR})
+    #message(STATUS "Matlab root is " ${Matlab_ROOT_DIR})
 
-    # Pass MATLAB flag to C compiler
-    add_definitions(-DMATLAB)
+    ## Pass MATLAB flag to C compiler
+    #add_definitions(-DMATLAB)
 
-    # Insist on the pre 2018 complex data API
-    # so that mxGetPr will work correctly
-    add_definitions(-DMATLAB_MEXSRC_RELEASE=R2017b)
+    ## Insist on the pre 2018 complex data API
+    ## so that mxGetPr will work correctly
+    #add_definitions(-DMATLAB_MEXSRC_RELEASE=R2017b)
 
-    message(STATUS "Using Matlab pre-2018a API for mxGetPr compatibility")
+    #message(STATUS "Using Matlab pre-2018a API for mxGetPr compatibility")
 
-    if (UNITTESTS)
-        # Disable unittests
-        message(STATUS "Disabling UNITTESTS because we are building Matlab interface")
-        set(UNITTESTS OFF)
-    endif (UNITTESTS)
+    #if (UNITTESTS)
+        ## Disable unittests
+        #message(STATUS "Disabling UNITTESTS because we are building Matlab interface")
+        #set(UNITTESTS OFF)
+    #endif (UNITTESTS)
 
-endif (MATLAB)
+#endif (MATLAB)
 
-# if we are building the R interface, let's look for R
-# and set some options
-# -----------------------------------------------------------------
-if (R_LANG)
+## if we are building the R interface, let's look for R
+## and set some options
+## -----------------------------------------------------------------
+#if (R_LANG)
 
-    message(STATUS "We are building the R interface")
+    #message(STATUS "We are building the R interface")
 
-    # Look for R libraries
-    find_package(R)
+    ## Look for R libraries
+    #find_package(R)
 
-    if (NOT R_FOUND)
-            message( FATAL_ERROR "You need R libraries to build the R interface" )
-    endif (NOT R_FOUND)
+    #if (NOT R_FOUND)
+            #message( FATAL_ERROR "You need R libraries to build the R interface" )
+    #endif (NOT R_FOUND)
 
-    message(STATUS "R exec is: " ${R_EXEC})
-    message(STATUS "R root dir is: " ${R_ROOT_DIR})
-    message(STATUS "R includes are in: " ${R_INCLUDE_DIRS})
+    #message(STATUS "R exec is: " ${R_EXEC})
+    #message(STATUS "R root dir is: " ${R_ROOT_DIR})
+    #message(STATUS "R includes are in: " ${R_INCLUDE_DIRS})
 
-    # Include directories for R headers
-    include_directories(${R_INCLUDE_DIRS})
+    ## Include directories for R headers
+    #include_directories(${R_INCLUDE_DIRS})
 
-    # Pass R_LANG flag to C compiler
-    add_definitions(-DR_LANG)
+    ## Pass R_LANG flag to C compiler
+    #add_definitions(-DR_LANG)
 
-    if (UNITTESTS)
-        # Disable unittests
-        message(STATUS "Disabling UNITTESTS because we are building the R interface")
-        set(UNITTESTS OFF)
-    endif (UNITTESTS)
+    #if (UNITTESTS)
+        ## Disable unittests
+        #message(STATUS "Disabling UNITTESTS because we are building the R interface")
+        #set(UNITTESTS OFF)
+    #endif (UNITTESTS)
 
-endif (R_LANG)
+#endif (R_LANG)
 
 
 # Create Static Library
@@ -265,7 +265,8 @@ add_subdirectory(lin_sys)
 # Static library
 add_library (osqpstatic STATIC ${osqp_src} ${osqp_headers} ${linsys_solvers})
 # Give same name to static library output
-set_target_properties(osqpstatic PROPERTIES OUTPUT_NAME osqp)
+#set_target_properties(osqpstatic PROPERTIES OUTPUT_NAME osqp)
+set_target_properties(osqpstatic PROPERTIES OUTPUT_NAME osqp EXPORT_NAME osqp)
 
 # Include directories for linear system solvers
 target_include_directories(osqpstatic PRIVATE ${linsys_solvers_includes})
@@ -286,7 +287,6 @@ install(TARGETS osqpstatic
         LIBRARY       DESTINATION "${CMAKE_INSTALL_LIBDIR}"
         RUNTIME       DESTINATION "${CMAKE_INSTALL_BINDIR}")
 
-
 # Install Headers
 # ----------------------------------------------
 
@@ -294,38 +294,38 @@ install(FILES ${osqp_headers} DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/osqp")
 
 
 
-if (MATLAB)
-target_link_libraries (osqpstatic ${Matlab_LIBRARIES})
-endif (MATLAB)
+#if (MATLAB)
+#target_link_libraries (osqpstatic ${Matlab_LIBRARIES})
+#endif (MATLAB)
 
-# If we are building Python/Matlab/R interface:
-#   - do not build shared library
-#   - do not build demo
-if (NOT PYTHON AND NOT MATLAB AND NOT R_LANG AND NOT EMBEDDED)
-    # Create osqp shared library
-    # NB: Add all the linear system solvers here
-    add_library (osqp SHARED ${osqp_src} ${osqp_headers} ${linsys_solvers})
+## If we are building Python/Matlab/R interface:
+##   - do not build shared library
+##   - do not build demo
+#if (NOT PYTHON AND NOT MATLAB AND NOT R_LANG AND NOT EMBEDDED)
+    ## Create osqp shared library
+    ## NB: Add all the linear system solvers here
+    #add_library (osqp SHARED ${osqp_src} ${osqp_headers} ${linsys_solvers})
 
-    # Include directories for linear system solvers
-    target_include_directories(osqp PRIVATE ${linsys_solvers_includes})
+    ## Include directories for linear system solvers
+    #target_include_directories(osqp PRIVATE ${linsys_solvers_includes})
 
-    # Declare include directories for the cmake exported target
-    target_include_directories(osqp
-                               PUBLIC "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>"
-                                      "$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}/osqp>")
+    ## Declare include directories for the cmake exported target
+    #target_include_directories(osqp
+                               #PUBLIC "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>"
+                                      #"$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}/osqp>")
 
-    # Install osqp shared library
-    install(TARGETS osqp
-            EXPORT  ${PROJECT_NAME}
-            LIBRARY       DESTINATION "${CMAKE_INSTALL_LIBDIR}"
-            ARCHIVE       DESTINATION "${CMAKE_INSTALL_LIBDIR}"
-            RUNTIME       DESTINATION "${CMAKE_INSTALL_BINDIR}")
+    ## Install osqp shared library
+    #install(TARGETS osqp
+            #EXPORT  ${PROJECT_NAME}
+            #LIBRARY       DESTINATION "${CMAKE_INSTALL_LIBDIR}"
+            #ARCHIVE       DESTINATION "${CMAKE_INSTALL_LIBDIR}"
+            #RUNTIME       DESTINATION "${CMAKE_INSTALL_BINDIR}")
 
-    # Create demo executable (linked to static library)
-    add_executable (osqp_demo ${PROJECT_SOURCE_DIR}/examples/osqp_demo.c)
-    target_link_libraries (osqp_demo osqpstatic)
+    ## Create demo executable (linked to static library)
+    #add_executable (osqp_demo ${PROJECT_SOURCE_DIR}/examples/osqp_demo.c)
+    #target_link_libraries (osqp_demo osqpstatic)
 
-endif (NOT PYTHON AND NOT MATLAB AND NOT R_LANG AND NOT EMBEDDED)
+#endif (NOT PYTHON AND NOT MATLAB AND NOT R_LANG AND NOT EMBEDDED)
 
 # Create CMake packages for the build directory
 # ----------------------------------------------
@@ -355,84 +355,84 @@ install(FILES ${CMAKE_CURRENT_BINARY_DIR}/osqp-config.cmake
 
 
 
-# Add uninstall command
-# ----------------------------------------------
-if(NOT TARGET uninstall)
-    configure_file(
-        "${CMAKE_CURRENT_SOURCE_DIR}/configure/cmake/cmake_uninstall.cmake.in"
-        "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
-        IMMEDIATE @ONLY)
-
-    add_custom_target(uninstall
-        COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)
-endif()
-
-
-
-# Add testing
-# ----------------------------------------------
-# Add custom command to generate tests
-if (UNITTESTS)
-    find_package(PythonInterp)
-    if(NOT PYTHONINTERP_FOUND)
-        message( FATAL_ERROR "You need python installed to generate unittests. If you do not want to compile the unittests pass -DUNITTESTS=OFF to cmake." )
-    endif()
-
-    INCLUDE(FindPythonModule)
-    find_python_module(numpy)
-    IF(NOT NUMPY_FOUND)
-        message( FATAL_ERROR "You need numpy python module installed to generate unittests. If you do not want to compile the unittests pass -DUNITTESTS=OFF to cmake." )
-    ENDIF()
-
-    find_python_module(scipy)
-    # Check scipy version for sparse.random functionalities
-    IF((NOT SCIPY_FOUND) OR (SCIPY_VERSION VERSION_LESS 0.17.0))
-        message( FATAL_ERROR "You need scipy python module installed to generate unittests. If you do not want to compile the unittests pass -DUNITTESTS=OFF to cmake." )
-    ENDIF()
-
-    find_python_module(__future__)
-    IF(NOT __FUTURE___FOUND)
-        message( FATAL_ERROR "You need future python module installed to generate unittests. If you do not want to compile the unittests pass -DUNITTESTS=OFF to cmake." )
-    ENDIF()
-
-    # Add test_headers and codegen_test_headers
-    add_subdirectory(tests)
-
-    # Generating tests.stamp so that the test data are not always generated
-    # set(data_timestamp ${PROJECT_SOURCE_DIR}/tests/tests_data.stamp)
-    add_custom_command(
-        WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/tests
-        COMMAND ${PYTHON_EXECUTABLE} generate_tests_data.py
-        DEPENDS ${PROJECT_SOURCE_DIR}/tests/generate_tests_data.py
-        OUTPUT ${codegen_test_headers}
-        COMMENT "Generating unittests data files using Python"
-    )
-
-    # Direct linear solver testing
-    include_directories(tests)
-    add_executable(osqp_tester
-                ${PROJECT_SOURCE_DIR}/tests/osqp_tester.c
-                ${PROJECT_SOURCE_DIR}/tests/osqp_tester.h
-		${PROJECT_SOURCE_DIR}/tests/minunit.h
-                ${test_headers}
-                ${codegen_test_headers})
-    target_link_libraries (osqp_tester osqpstatic)
-
-    # Add custom memory target
-    add_executable(osqp_tester_custom_memory
-                   EXCLUDE_FROM_ALL
-                   ${PROJECT_SOURCE_DIR}/tests/osqp_tester.c
-                   ${PROJECT_SOURCE_DIR}/tests/osqp_tester.h
-	           ${PROJECT_SOURCE_DIR}/tests/minunit.h
-                   ${test_headers}
-                   ${codegen_test_headers}
-		   ${PROJECT_SOURCE_DIR}/tests/custom_memory/custom_memory.c
-		   ${PROJECT_SOURCE_DIR}/tests/custom_memory/custom_memory.h
-		)
-    target_link_libraries (osqp_tester_custom_memory osqpstatic)
-
-    # Add testing
-    include(CTest)
-    enable_testing()
-    add_test(NAME tester COMMAND $<TARGET_FILE:osqp_tester>)
-endif()
+## Add uninstall command
+## ----------------------------------------------
+#if(NOT TARGET uninstall)
+    #configure_file(
+        #"${CMAKE_CURRENT_SOURCE_DIR}/configure/cmake/cmake_uninstall.cmake.in"
+        #"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
+        #IMMEDIATE @ONLY)
+
+    #add_custom_target(uninstall
+        #COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)
+#endif()
+
+
+
+## Add testing
+## ----------------------------------------------
+## Add custom command to generate tests
+#if (UNITTESTS)
+    #find_package(PythonInterp)
+    #if(NOT PYTHONINTERP_FOUND)
+        #message( FATAL_ERROR "You need python installed to generate unittests. If you do not want to compile the unittests pass -DUNITTESTS=OFF to cmake." )
+    #endif()
+
+    #INCLUDE(FindPythonModule)
+    #find_python_module(numpy)
+    #IF(NOT NUMPY_FOUND)
+        #message( FATAL_ERROR "You need numpy python module installed to generate unittests. If you do not want to compile the unittests pass -DUNITTESTS=OFF to cmake." )
+    #ENDIF()
+
+    #find_python_module(scipy)
+    ## Check scipy version for sparse.random functionalities
+    #IF((NOT SCIPY_FOUND) OR (SCIPY_VERSION VERSION_LESS 0.17.0))
+        #message( FATAL_ERROR "You need scipy python module installed to generate unittests. If you do not want to compile the unittests pass -DUNITTESTS=OFF to cmake." )
+    #ENDIF()
+
+    #find_python_module(__future__)
+    #IF(NOT __FUTURE___FOUND)
+        #message( FATAL_ERROR "You need future python module installed to generate unittests. If you do not want to compile the unittests pass -DUNITTESTS=OFF to cmake." )
+    #ENDIF()
+
+    ## Add test_headers and codegen_test_headers
+    #add_subdirectory(tests)
+
+    ## Generating tests.stamp so that the test data are not always generated
+    ## set(data_timestamp ${PROJECT_SOURCE_DIR}/tests/tests_data.stamp)
+    #add_custom_command(
+        #WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/tests
+        #COMMAND ${PYTHON_EXECUTABLE} generate_tests_data.py
+        #DEPENDS ${PROJECT_SOURCE_DIR}/tests/generate_tests_data.py
+        #OUTPUT ${codegen_test_headers}
+        #COMMENT "Generating unittests data files using Python"
+    #)
+
+    ## Direct linear solver testing
+    #include_directories(tests)
+    #add_executable(osqp_tester
+                #${PROJECT_SOURCE_DIR}/tests/osqp_tester.c
+                #${PROJECT_SOURCE_DIR}/tests/osqp_tester.h
+		#${PROJECT_SOURCE_DIR}/tests/minunit.h
+                #${test_headers}
+                #${codegen_test_headers})
+    #target_link_libraries (osqp_tester osqpstatic)
+
+    ## Add custom memory target
+    #add_executable(osqp_tester_custom_memory
+                   #EXCLUDE_FROM_ALL
+                   #${PROJECT_SOURCE_DIR}/tests/osqp_tester.c
+                   #${PROJECT_SOURCE_DIR}/tests/osqp_tester.h
+			   #${PROJECT_SOURCE_DIR}/tests/minunit.h
+                   #${test_headers}
+                   #${codegen_test_headers}
+		   #${PROJECT_SOURCE_DIR}/tests/custom_memory/custom_memory.c
+		   #${PROJECT_SOURCE_DIR}/tests/custom_memory/custom_memory.h
+		#)
+    #target_link_libraries (osqp_tester_custom_memory osqpstatic)
+
+    ## Add testing
+    #include(CTest)
+    #enable_testing()
+    #add_test(NAME tester COMMAND $<TARGET_FILE:osqp_tester>)
+#endif()
